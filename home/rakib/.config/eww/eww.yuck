(defvar open true)
(defvar poll_media false)
(defvar apps "[]")
(defpoll media :interval "500ms" :initial "{}" :run-while {open && poll_media} "./media.sh")
(defpoll bluetooth :interval "1s" :initial "{}" :run-while open "./bluetooth.sh")
(defpoll general :interval "500ms" :initial "{}" :run-while open "./general.sh")
(defpoll eww_run_while_fix :interval "24h" "sleep 1s && eww update open=false")

(defwindow bar
  :monitor 0
  :geometry (geometry :anchor "top right")
  (eventbox :onhover "eww update open=true" :onhoverlost "eww update open=false"
    (box :space-evenly false :class { open ? "topbar open" :  "topbar" }
      (revealer :reveal open :transition "slideleft" :duration "100ms"
        (box :space-evenly false
          (controls)
          (music)
        )
      )
      (button :class "icon" "keyboard_arrow_left")
      {eww_run_while_fix}
    )
  )
)

(defwidget controls []
  (box :class "controls" :spacing 16 :space-evenly false
    (box
      (button :class "icon" :onclick "systemctl poweroff" "power_settings_new" )
      (button :class "icon" :onclick "systemctl reboot" "restart_alt" )
    )
    (label :tooltip {general.today} :text {general.time})
    (box :space-evenly false :valign "center"
      (label :class "icon" :text "memory")
      (label :text {EWW_CPU.avg})
    )
    (eventbox :onclick "foot --title=system-monitor btm"
      (box :space-evenly false :valign "center"
        (label :class "icon" :text "straighten")
        (label :text {EWW_RAM.used_mem_perc})
      )
    )
    (eventbox
      :onscroll "if [ '{}' == 'up' ]; then amixer -q sset Master 10%+; else amixer -q sset Master 10%-; fi"
      (box :space-evenly false :valign "center"
        (label :class "icon" :text "volume_up")
        (label :text {general.volume})
      )
    )
    (eventbox
      :tooltip {bluetooth.connected_device}
      :onclick "./bluetooth.sh toggle &"
      (box :space-evenly false :valign "center"
        (label :class "icon" :text {strlength(bluetooth.connected_device) > 0 ? "bluetooth_connected" : "bluetooth"})
        (label :text "${bluetooth.battery}%" :visible {strlength(bluetooth.connected_device) > 0})
      )
    )
  )
)

(defwidget music []
  (box :class "music" :space-evenly false
    (eventbox
      :onscroll "if [ '{}' == 'up' ]; then ./media.sh next; else ./media.sh previous; fi"
      (button :class "icon" :onclick "./media.sh play-pause" {media.status == "Playing" ? "music_note" : "play_arrow"})
    )
    (overlay :class "progress"
      (eventbox :onhoverlost "eww update poll_media=true"
        (scale :min 0 :max 100 :value {media.progress?:0} :onchange "eww update poll_media=false && ./media.sh progress {}" :timeout "500ms")
      )
      (label
        :limit-width 16
        :text {media.label?:""}
      )
    )
  )
)

(defwindow apps_window
  :monitor 0
  :focusable true
  :geometry (geometry :anchor "center center")
  (apps))

(defwidget apps []
  (box :class "apps" :orientation "vertical" :space-evenly false
    (box :class "search" :height 44 :space-evenly false
      (label :class "icon" :text "search")
      (input :onchange "./apps.sh query {}" :onaccept "./apps.sh close & eval '${apps[0]?.exec}'" :timeout "500ms")
    )
    (scroll :width 300 :height 300
      (box :orientation "vertical" :spacing 8 :space-evenly false
        (for app in apps
          (button :onclick "./apps.sh close & eval '${app.exec}'"
            (box :spacing 16 :space-evenly false
              (image :path {app.icon?:"./arch.png"} :image-width 24 :image-height 24)
              (label :text {app.label} :limit-width 30)
            )
          )
        )
      )
    )
  )
)